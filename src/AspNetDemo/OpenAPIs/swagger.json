{
  "openapi": "3.0.1",
  "info": {
    "title": "Passport API",
    "description": "Issuer and validator APIs for Passport Cloud wallets.",
    "contact": {
      "name": "IdRamp",
      "url": "https://www.idramp.com"
    },
    "version": "v1"
  },
  "paths": {
    "/api/v1/basic-message": {
      "post": {
        "tags": [
          "BasicMessage"
        ],
        "summary": "Send a message to an identity wallet via an existing connection.",
        "operationId": "SendMessage",
        "requestBody": {
          "description": "The request config",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/NewBasicMessage"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBasicMessage"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/NewBasicMessage"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/NewBasicMessage"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/basic-message/{connectionId}": {
      "get": {
        "tags": [
          "BasicMessage"
        ],
        "summary": "Returns any basic messages received from the connection",
        "operationId": "GetMessages",
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "description": "The connection over which the messages were received.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The connection over which the messages were received.",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicMessageDetail"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicMessageDetail"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BasicMessageDetail"
                  }
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/v1/connection": {
      "get": {
        "tags": [
          "Connection"
        ],
        "summary": "List connections",
        "operationId": "ListConnections",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdModel"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Connection"
        ],
        "summary": "Create a connection offer",
        "operationId": "CreateConnection",
        "requestBody": {
          "description": "The connection config",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConnectionModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConnectionModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConnectionModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateConnectionModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionOfferModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionOfferModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionOfferModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/connection/{connectionId}": {
      "get": {
        "tags": [
          "Connection"
        ],
        "summary": "Get the requested connection details",
        "operationId": "GetConnection",
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionStateModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionStateModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionStateModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/connection/{connectionId}/status": {
      "get": {
        "tags": [
          "Connection"
        ],
        "summary": "Get the connection status",
        "operationId": "GetConnectionStatus",
        "parameters": [
          {
            "name": "connectionId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionState"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionState"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConnectionState"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/credential/definition": {
      "post": {
        "tags": [
          "Credential"
        ],
        "summary": "Create credential definition",
        "operationId": "CreateCredentialDefinition",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCredentialDefinitionModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCredentialDefinitionModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCredentialDefinitionModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCredentialDefinitionModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IdModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "tags": [
          "Credential"
        ],
        "summary": "List credential definition Ids",
        "operationId": "ListCredentialDefinition",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdModel"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/v1/credential/definition/{credentialDefinitionId}": {
      "get": {
        "tags": [
          "Credential"
        ],
        "summary": "Get a credential definition",
        "operationId": "GetCredentialDefinition",
        "parameters": [
          {
            "name": "credentialDefinitionId",
            "in": "path",
            "description": "The credential definition id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The credential definition id",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCredentialDefinitionModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCredentialDefinitionModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCredentialDefinitionModel"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/credential": {
      "post": {
        "tags": [
          "Credential"
        ],
        "summary": "Create a credential offer based on a provided credential definition id.\r\nIf the connectionId is not included, then it will be a connectionless offer and the QR contents will be returned.",
        "operationId": "CreateCredential",
        "requestBody": {
          "description": "The credential config",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCredentialOfferModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCredentialOfferModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCredentialOfferModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCredentialOfferModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialOfferModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialOfferModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialOfferModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/credential/{credentialId}": {
      "get": {
        "tags": [
          "Credential"
        ],
        "summary": "Get the credential details",
        "operationId": "GetCredential",
        "parameters": [
          {
            "name": "credentialId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Credential"
        ],
        "summary": "Revoke the credential",
        "operationId": "RevokeCredential",
        "parameters": [
          {
            "name": "credentialId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/credential/{credentialId}/status": {
      "get": {
        "tags": [
          "Credential"
        ],
        "summary": "Get the credential status",
        "operationId": "GetCredentialStatus",
        "parameters": [
          {
            "name": "credentialId",
            "in": "path",
            "description": "",
            "required": true,
            "schema": {
              "type": "string",
              "description": "",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialState"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialState"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CredentialState"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/permission": {
      "get": {
        "tags": [
          "Permission"
        ],
        "summary": "Check permissions for an auth token",
        "operationId": "CheckPermission",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PermissionModel"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              },
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/proof/config": {
      "post": {
        "tags": [
          "Proof"
        ],
        "summary": "Create proof configuration",
        "operationId": "CreateProofConfig",
        "requestBody": {
          "description": "",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ProofModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProofModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProofModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProofModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/IdModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "get": {
        "tags": [
          "Proof"
        ],
        "summary": "List ProofConfig Ids",
        "operationId": "ListProofConfig",
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdModel"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdModel"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IdModel"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/v1/proof/config/{proofConfigId}": {
      "get": {
        "tags": [
          "Proof"
        ],
        "summary": "Get a proof config",
        "operationId": "GetProofConfig",
        "parameters": [
          {
            "name": "proofConfigId",
            "in": "path",
            "description": "The proof config id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The proof config id",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProofModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProofModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProofModel"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Proof"
        ],
        "summary": "Update an existing proof config",
        "operationId": "UpdateProofConfigPost",
        "parameters": [
          {
            "name": "proofConfigId",
            "in": "path",
            "description": "The proof config id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The proof config id",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The updated proof fields",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ProofModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProofModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProofModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProofModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Proof"
        ],
        "summary": "Update an existing proof config",
        "operationId": "UpdateProofConfig",
        "parameters": [
          {
            "name": "proofConfigId",
            "in": "path",
            "description": "The proof config id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The proof config id",
              "nullable": true
            }
          }
        ],
        "requestBody": {
          "description": "The updated proof fields",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/ProofModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProofModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProofModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProofModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/proof": {
      "post": {
        "tags": [
          "Proof"
        ],
        "summary": "Create a proof request based on a provided proof config (either by id of an existing config, or a provided configuration).\r\nIf the connectionId is not included, then it will be a connectionless proof and the QR contents will be returned.",
        "operationId": "CreateProof",
        "requestBody": {
          "description": "The request config",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProofRequestModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProofRequestModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProofRequestModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProofRequestModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProofRequestResultModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProofRequestResultModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateProofRequestResultModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/proof/{challengeId}": {
      "get": {
        "tags": [
          "Proof"
        ],
        "summary": "Get the requested proof",
        "operationId": "GetProof",
        "parameters": [
          {
            "name": "challengeId",
            "in": "path",
            "description": "The proof request identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The proof request identifier",
              "nullable": true
            }
          },
          {
            "name": "verify",
            "in": "query",
            "description": "If true, ensure the proof has been verified before returning the result",
            "schema": {
              "type": "boolean",
              "description": "If true, ensure the proof has been verified before returning the result",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProofStateModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProofStateModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProofStateModel"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/proof/{challengeId}/status": {
      "get": {
        "tags": [
          "Proof"
        ],
        "summary": "Get the proof status",
        "operationId": "GetProofStatus",
        "parameters": [
          {
            "name": "challengeId",
            "in": "path",
            "description": "The proof request identifier",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The proof request identifier",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProofState"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProofState"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProofState"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          },
          "403": {
            "description": "Forbidden"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/schema": {
      "get": {
        "tags": [
          "Schema"
        ],
        "summary": "List schema",
        "operationId": "ListSchema",
        "parameters": [
          {
            "name": "search",
            "in": "query",
            "description": "If specified, return only schema with a name or attributes which contain this string",
            "schema": {
              "type": "string",
              "description": "If specified, return only schema with a name or attributes which contain this string",
              "nullable": true
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page (zero based)",
            "schema": {
              "type": "integer",
              "description": "Page (zero based)",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "Records to return per page",
            "schema": {
              "type": "integer",
              "description": "Records to return per page",
              "format": "int32",
              "default": 20
            }
          },
          {
            "name": "ownedOnly",
            "in": "query",
            "description": "If true, only return schema created by this wallet.",
            "schema": {
              "type": "boolean",
              "description": "If true, only return schema created by this wallet.",
              "default": false
            }
          },
          {
            "name": "schemaId",
            "in": "query",
            "description": "If specified, only the schema with this identifier is returned.",
            "schema": {
              "type": "string",
              "description": "If specified, only the schema with this identifier is returned.",
              "nullable": true
            }
          },
          {
            "name": "networkId",
            "in": "query",
            "description": "If specified, only consults this network for the schema",
            "schema": {
              "type": "string",
              "description": "If specified, only consults this network for the schema",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaListResult"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaListResult"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaListResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "403": {
            "description": "Forbidden"
          }
        }
      },
      "post": {
        "tags": [
          "Schema"
        ],
        "summary": "Create a schema on the wallet's network",
        "operationId": "CreateSchema",
        "requestBody": {
          "description": "The schema to create",
          "content": {
            "application/json-patch+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSchemaModel"
              }
            },
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSchemaModel"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSchemaModel"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSchemaModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    },
    "/api/v1/schema/{schemaId}": {
      "get": {
        "tags": [
          "Schema"
        ],
        "summary": "Get a schema by its Id.",
        "operationId": "GetSchema",
        "parameters": [
          {
            "name": "schemaId",
            "in": "path",
            "description": "The schema id.",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The schema id.",
              "nullable": true
            }
          },
          {
            "name": "networkId",
            "in": "query",
            "description": "If specified, only consults this network for the schema",
            "schema": {
              "type": "string",
              "description": "If specified, only consults this network for the schema",
              "nullable": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaModel"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaModel"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaModel"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "NewBasicMessage": {
        "type": "object",
        "properties": {
          "connectionId": {
            "type": "string",
            "description": "The connection which will be used to send the message.",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "The text content of the message.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BasicMessageDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The unique id of the basic message",
            "nullable": true
          },
          "content": {
            "type": "string",
            "description": "The text content of the message.",
            "nullable": true
          },
          "sentTime": {
            "type": "string",
            "description": "The time the message was sent.",
            "format": "date-time"
          },
          "receivedTime": {
            "type": "string",
            "description": "The time the message was received.",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "IdModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "An identifier",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "An identifer used to reference details"
      },
      "CreateConnectionModel": {
        "type": "object",
        "properties": {
          "aliasName": {
            "type": "string",
            "description": "Optional. The name of the connection as it will appear in the Identity Wallet.",
            "nullable": true
          },
          "aliasIconUrl": {
            "type": "string",
            "description": "Optional. An Internet routable URL to an icon to be displayed with the connection in the Identity Wallet.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConnectionOfferModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The connection identifier",
            "nullable": true
          },
          "contents": {
            "type": "string",
            "description": "The connection offer URL",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A connection offer details"
      },
      "ErrorModel": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConnectionState": {
        "enum": [
          "Invited",
          "Negotiating",
          "Connected"
        ],
        "type": "string",
        "description": "The state of the connection.\r\nInvited - the connection offer has been created\r\nNegotiating - a response has been received based on this offer\r\nConnected - the connection is complete and ready for use"
      },
      "ConnectionStateModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "aliasName": {
            "type": "string",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/ConnectionState"
          },
          "createdAtUtc": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateCredentialDefinitionModel": {
        "required": [
          "schemaId",
          "tag"
        ],
        "type": "object",
        "properties": {
          "schemaId": {
            "type": "string",
            "description": "Required. The schema Id the credential definition is based on. All credentials created with the resulting credential definition will have attributes which match this schema"
          },
          "tag": {
            "type": "string",
            "description": "Required. Appended to the credential definition id. Human readable. Unique per schema"
          }
        },
        "additionalProperties": false,
        "description": "Properties used to create a new credential definition"
      },
      "AttributeValue": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Attribute name (must match attribute name in schema)",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Attribute value",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The value of an attribute in a credential."
      },
      "CreateCredentialOfferModel": {
        "required": [
          "credentialDefinitionId",
          "values"
        ],
        "type": "object",
        "properties": {
          "credentialDefinitionId": {
            "type": "string",
            "description": "Required. The Id of the credential to issue"
          },
          "connectionId": {
            "type": "string",
            "description": "Optional. Send offer to this connection Id",
            "nullable": true
          },
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeValue"
            },
            "description": "Required. The values to use with the issued credential"
          },
          "credentialName": {
            "type": "string",
            "description": "Optional. Name of the credential. If not set, it will use the schema name",
            "nullable": true
          },
          "credentialIconUrl": {
            "type": "string",
            "description": "Optional. An icon representing the credential. If not set, no icon will be set",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Fields required for creation of a credential offer"
      },
      "CredentialOfferModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The credential identifier"
          },
          "contents": {
            "type": "string",
            "description": "The connection-less offer URL. Only returned when a connection is not specified",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A credential offer result"
      },
      "CredentialState": {
        "enum": [
          "Offered",
          "Requested",
          "Issued",
          "Rejected",
          "Revoked"
        ],
        "type": "string",
        "description": "Credential states"
      },
      "CredentialModel": {
        "type": "object",
        "properties": {
          "state": {
            "$ref": "#/components/schemas/CredentialState"
          },
          "id": {
            "type": "string",
            "nullable": true
          },
          "credentialDefinitionId": {
            "type": "string",
            "nullable": true
          },
          "schemaId": {
            "type": "string",
            "nullable": true
          },
          "canBeRevoked": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "PermissionModel": {
        "type": "object",
        "properties": {
          "canIssue": {
            "type": "boolean",
            "description": "Indicates that this auth token has permission to create and issue credentials"
          },
          "canProof": {
            "type": "boolean",
            "description": "Indicates that this auth token has permission to create and request proofs"
          }
        },
        "additionalProperties": false
      },
      "AttributeRestrictions": {
        "type": "object",
        "properties": {
          "schemaId": {
            "type": "string",
            "description": "Require that the attribute is from a credential based on the schema with this SchemaId",
            "nullable": true
          },
          "schemaName": {
            "type": "string",
            "description": "Require that the attribute is from a credential based on the schema with this Name",
            "nullable": true
          },
          "credDefId": {
            "type": "string",
            "description": "Require that the attribute is from a credential with this credential definition Id",
            "nullable": true
          },
          "issuerDid": {
            "type": "string",
            "description": "Require that the attribute is from a credential issued by a this DID",
            "nullable": true
          },
          "schemaIssuerDid": {
            "type": "string",
            "description": "Require that the attribute is from a credential based on the schema created by this DID",
            "nullable": true
          },
          "schemaVersion": {
            "type": "string",
            "description": "Require that the attribute is from a credential based on the schema with this Version",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IntervalModel": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Only allow credentials which are valid after this time",
            "format": "date-time",
            "nullable": true
          },
          "to": {
            "type": "string",
            "description": "Only allow credentials which are valid before this time",
            "format": "date-time",
            "nullable": true
          },
          "validWithin": {
            "type": "string",
            "description": "Only allow credentials which are valid between now and this time period into the past. Example: 00:05:00 would result in a PassportApi.Core.Models.IntervalModel.From value of (now - 5 minutes) and a PassportApi.Core.Models.IntervalModel.To value of (now)",
            "format": "date-span",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Represents a revocation interval"
      },
      "ProofAttributeModel": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Required. Identifier for the attribute, must be unique. Can be any value. Used to identify the value in the proof response."
          },
          "name": {
            "type": "string",
            "description": "Required. Name of the attribute to be requested. If adding a restriction on schema or credential definition, must match the schema's attribute name."
          },
          "schemaId": {
            "type": "string",
            "description": "Optional. If set the credential must be created from this Schema.\r\nThis is a shortcut for the Restrictions property. If Restrictions is not null, this will be ignored.",
            "nullable": true
          },
          "schemaName": {
            "type": "string",
            "description": "Optional. Require that the attribute is from a credential based on the schema with this Name.\r\nThis is a shortcut for the Restrictions property. If Restrictions is not null, this will be ignored.",
            "nullable": true
          },
          "credDefId": {
            "type": "string",
            "description": "Optional. Require that the attribute is from a credential with this credential definition Id.\r\nThis is a shortcut for the Restrictions property. If Restrictions is not null, this will be ignored.",
            "nullable": true
          },
          "restrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeRestrictions"
            },
            "description": "Optional. Used to restrict the credential used to fulfil the proof.\r\nIf not null, the PassportApi.Core.Models.Proof.ProofAttributeModel.SchemaId, PassportApi.Core.Models.Proof.ProofAttributeModel.SchemaName, and PassportApi.Core.Models.Proof.ProofAttributeModel.CredDefId will be ignored.",
            "nullable": true
          },
          "nonRevoked": {
            "$ref": "#/components/schemas/IntervalModel"
          }
        },
        "additionalProperties": false,
        "description": "An attribute being requested in a proof"
      },
      "PredicateType": {
        "enum": [
          "GreaterThan",
          "GreaterThanOrEqualTo",
          "LessThanOrEqualTo",
          "LessThan"
        ],
        "type": "string",
        "description": "How to compare the attribute value to the predicated value"
      },
      "ProofPredicateModel": {
        "required": [
          "id",
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Required. Identifier for the attribute, must be unique. Can be any value. Used to identify the value in the proof response."
          },
          "name": {
            "type": "string",
            "description": "Required. Name of the attribute to be requested. If adding a restriction on schema or credential definition, must match the schema's attribute name."
          },
          "type": {
            "$ref": "#/components/schemas/PredicateType"
          },
          "value": {
            "type": "integer",
            "description": "Required. The value to be compared to the attribute value. (eg. attribute value >= PassportApi.Core.Models.Proof.ProofPredicateModel.Value)",
            "format": "int32"
          },
          "restrictions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttributeRestrictions"
            },
            "description": "Optional. Used to restrict the credential used to fulfil the proof.",
            "nullable": true
          },
          "nonRevoked": {
            "$ref": "#/components/schemas/IntervalModel"
          }
        },
        "additionalProperties": false,
        "description": "An attribute restriction in a proof"
      },
      "ProofModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the proof as it will appear in the identity wallet. Defaults to \"Request\"",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProofAttributeModel"
            },
            "description": "List of attributes to request",
            "nullable": true
          },
          "predicates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProofPredicateModel"
            },
            "description": "List of predicates to request",
            "nullable": true
          },
          "nonRevoked": {
            "$ref": "#/components/schemas/IntervalModel"
          }
        },
        "additionalProperties": false,
        "description": "A proof configuration"
      },
      "CreateProofRequestModel": {
        "type": "object",
        "properties": {
          "proofConfigId": {
            "type": "string",
            "description": "Either this field or PassportApi.Core.Models.Proof.CreateProofRequestModel.ProofConfig is required. If both are valid, PassportApi.Core.Models.Proof.CreateProofRequestModel.ProofConfig will take priority. The identifier of the previously created proof configuration.",
            "nullable": true
          },
          "connectionId": {
            "type": "string",
            "description": "Optional. If included, the proof request will be sent via this connection, and not returned via this API.",
            "nullable": true
          },
          "proofConfig": {
            "$ref": "#/components/schemas/ProofModel"
          }
        },
        "additionalProperties": false,
        "description": "Proof request creation model"
      },
      "CreateProofRequestResultModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Proof Request Id",
            "nullable": true
          },
          "requestUrl": {
            "type": "string",
            "description": "The connection-less proof request URL. Only returned when a connection is not specified",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The results of proof request creation"
      },
      "ProofState": {
        "enum": [
          "Accepted",
          "Rejected",
          "Requested",
          "Invalid"
        ],
        "type": "string",
        "description": "The state of the proof request\r\nRequested - The proof request has been generated\r\nAccepted - The proof response has been returned from the client\r\nRejected - The client decided not to fulfill the proof"
      },
      "RequestedAttributeValue": {
        "type": "object",
        "properties": {
          "attributeId": {
            "type": "string",
            "description": "The requested attribute's assigned identifier",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Attribute name (must match attribute name in schema)",
            "nullable": true
          },
          "value": {
            "type": "string",
            "description": "Attribute value",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "The value of an attribute requested in a proof."
      },
      "VerifiedState": {
        "enum": [
          "NotChecked",
          "Verified",
          "VerificationFailed"
        ],
        "type": "string",
        "description": "The verification state of the proof response\r\nNotChecked - No attempt has been made to verify the proof\r\nVerified - The proof has been verified\r\nVerificationFailed - Verification was attempted and the proof was found to be invalid"
      },
      "ProofStateModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The proof request identifier",
            "nullable": true
          },
          "state": {
            "$ref": "#/components/schemas/ProofState"
          },
          "requestedAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProofAttributeModel"
            },
            "description": "List of attributes requested to be proven.",
            "nullable": true
          },
          "predicateAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProofPredicateModel"
            },
            "description": "List of predicated attributes to be proven.",
            "nullable": true
          },
          "attributeValues": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestedAttributeValue"
            },
            "description": "List of attributes returned by the prover.",
            "nullable": true
          },
          "verifiedState": {
            "$ref": "#/components/schemas/VerifiedState"
          }
        },
        "additionalProperties": false,
        "description": "The state of the proof request"
      },
      "SchemaModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The schema identifier",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "The display name for the schema",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "The schema version. Used to differentiate between schema from the same issuer and same name",
            "nullable": true
          },
          "attributes": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of attributes which will be included in any credential created from this schema",
            "nullable": true
          },
          "networkId": {
            "type": "string",
            "description": "The schema exists on this ledger network. A schema record only exists on a single ledger",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "A Hyperledger Indy Schema"
      },
      "SchemaListResult": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "total": {
            "type": "integer",
            "format": "int32"
          },
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemaModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateSchemaModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the new schema",
            "nullable": true
          },
          "version": {
            "type": "string",
            "description": "The version of the new schema. Commonly in the format {1.0}",
            "nullable": true
          },
          "attributeNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of attributes for the new schema. Once created, this list cannot be modified. A new schema would need to be created either with a new name, or new version value",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Fields required for schema creation"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}